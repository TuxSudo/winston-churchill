{
  "version": 3,
  "sources": [
    "/Users/corybrown/code/winston-churchill/node_modules/gulp-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "/Users/corybrown/code/winston-churchill/src/domingo.js",
    "/Users/corybrown/code/winston-churchill/src/index.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACr
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var render = function rendre(template, data) {\n        var frag = document.createDocumentFragment(),\n            typeOf = function (thing) {\n                return [].toString.call({}).replace(/\\[object\\s(.*)\\]/, '$1').toLowerCase();\n            };\n\n        if (typeOf(data) === 'string') {\n            data = JSON.parse(data);\n        }\n\n        if (typeOf(data) !== 'array') {\n            data = [data];\n        }\n\n        data.forEach(function (datum) {\n            var els = [].slice.call(template.cloneNode(true).childNodes);\n\n            els.forEach(function (el) {\n\n                if (el.childNodes.length) {\n                    rendre(el, datum);\n                }\n                frag.appendChild(processEl(el, datum));\n            });\n        });\n        return frag;\n    },\n    processEl = function (el, data) {\n        processText(el, data);\n        processAttrs(el, data);\n\n        return el;\n    },\n    processAttrs = function (el, data) {\n        var attrs;\n        if (el.attributes) {\n            attrs = [].slice.call(el.attributes);\n\n            attrs.forEach(function (attr) {\n                processAttr(attr, data, el);\n            });\n        }\n    },\n    processAttr = function (attr, data, el) {\n        var newAttr = renderTemplateString(attr.name, data),\n            newVal = renderTemplateString(attr.value, data);\n\n        if (attr.name !== newAttr || attr.value !== newVal) {\n            el.removeAttribute(attr.name);\n            el.setAttribute(newAttr, newVal);\n        }\n    },\n    processText = function (el, data) {\n        el.textContent = renderTemplateString(el.textContent, data);\n    },\n    renderTemplateString = function (template, data) {\n        var delim = {\n                open: '{{',\n                close: '}}'\n            },\n            delimRE = new RegExp(delim.open + '.*?' + delim.close, 'ig'),\n            matches = template.match(delimRE),\n            replacements,\n            newStr = template.slice();\n\n        if (matches) {\n            replacements = matches.map(function (item) {\n                var itm = item.replace(delim.open, '').replace(delim.close, '');\n                if (itm === 'this') {\n                    return data;\n                } else {\n                    return itm.split(/\\.|\\//g).reduce(function (val, segment) {\n                        return (val && val[segment]) || '';\n                    }, data);\n                    // return data[itm] || '';\n                }\n            });\n            replacements.forEach(function (item, idx) {\n                newStr = newStr.replace(matches[idx], item);\n            });\n        }\n        return newStr;\n    };\n\nmodule.exports = render;\n",
    "var render = require('./domingo');\n\nwindow.wc = {\n    register: function (name, config) {\n        var onCreates = [],\n            onAttacheds = [],\n            onDetatcheds = [],\n            onAttrChgds = [],\n            proto,\n            protoSrc,\n            WCComponent,\n            createdCB = function () {\n                var component = this,\n                    args = [].slice.call(arguments);\n                onCreates.forEach( function (cb) { cb.apply(component, args); } );\n            },\n            attachedCB = function () {\n                var component = this,\n                    args = [].slice.call(arguments);\n                onAttacheds.forEach( function (cb) { cb.apply(component, args); } );\n            },\n            detachedCB = function () {\n                var component = this,\n                    args = [].slice.call(arguments);\n                onDetatcheds.forEach( function (cb) { cb.apply(component, args); } );\n            },\n            attributeChangedCB = function () {\n                var component = this,\n                    args = [].slice.call(arguments);\n                onAttrChgds.forEach( function (cb) { cb.apply(component, args); } );\n            },\n            onCreated = (fn) => {\n                onCreates.push(fn);\n                return this;\n            },\n            onAttached = (fn) => {\n                onAttacheds.push(fn);\n                return this;\n            },\n            onDetached = (fn) => {\n                onDetatcheds.push(fn);\n                return this;\n            },\n            onAttributeChanged = (fn) => {\n                onAttrChgds.push(fn);\n                return this;\n            };\n\n        config = config || {};\n\n        if (config.prototype) {\n            if (typeof config.prototype === 'string') {\n                protoSrc = document.createElement(config.prototype).constructor;\n            } else {\n                protoSrc = config.prototype;\n            }\n        } else {\n            protoSrc = HTMLElement.prototype;\n        }\n\n        proto = ( () => {\n            var templateEl = document.createElement('template'),\n                data = {};\n\n            templateEl.appendChild(document.createElement('content'));\n\n            return Object.create(protoSrc, {\n\n                createdCallback: {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: createdCB\n                },\n\n                attachedCallback: {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: attachedCB\n                },\n\n                detachedCallback: {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: detachedCB\n                },\n\n                attributeChangedCallback: {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: attributeChangedCB\n                },\n\n                onCreated: {\n                    enumerable: true,\n                    configurable: false,\n                    writable: false,\n                    value: onCreated\n                },\n\n                onAttached: {\n                    enumerable: true,\n                    configurable: false,\n                    writable: false,\n                    value: onAttached\n                },\n\n                onDetached: {\n                    enumerable: true,\n                    configurable: false,\n                    writable: false,\n                    value: onDetached\n                },\n\n                onAttributeChanged: {\n                    enumerable: true,\n                    configurable: false,\n                    writable: false,\n                    value: onAttributeChanged\n                },\n\n                render: {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: render\n                },\n\n                template: {\n                    get: () => templateEl,\n                    set: function (templ) {\n                        var newShadowContent = this.render(document.importNode(templ.content, true), this.data);\n                        this.createShadowRoot().appendChild(newShadowContent);\n                        templateEl = templ;\n                    }\n                },\n\n                data: {\n                    get: () => data,\n                    set: function (dataObj) {\n                        var newShadowContent = this.render(document.importNode(this.template.content, true), dataObj);\n                        this.createShadowRoot().appendChild(newShadowContent);\n                        data = dataObj;\n                    }\n                }\n\n          });\n        })();\n\n        WCComponent = document.registerElement(name, {\n            prototype: proto,\n            extends: config.extends\n        });\n\n        WCComponent.template = templateEl => {\n            var thisComponent = this;\n\n            thisComponent.template = templateEl;\n\n            [].slice.call(document.querySelectorAll(name)).forEach(component => {\n                component.template = templateEl;\n            });\n        };\n\n        return WCComponent;\n    }\n};\n"
  ]
}